version: 2
jobs:
  build:
    server:
    env_file:
      - .env
    image: python:3.7
    working_dir: /mnt
    volumes:
      - .:/mnt
    depends_on:
      - db
    ports:
      - 3000:3000
    command: python src/server.py

  dbdata:
    image: busybox
    volumes:
      - /var/lib/postgresql/data
  db:
    image: postgres:9.4
    volumes_from:
      - dbdata
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password

  testserver:
    env_file: .env
    image: python:3.7
    working_dir: /mnt
    volumes:
      - .:/mnt
    depends_on:
      - testdb
    ports:
      - 5053:5053
    environment:
      APPLICATION_PORT: 5053
      APPLICATION_DB_CONTAINER: testdb
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    command: python -m pytest test/

  testdb:
    image: postgres:9.4
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          keys:
            - venv-{{ checksum "requirements-dev.txt" }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install Python requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements-dev.txt
      - save_cache:
          key: venv-{{ checksum "requirements-dev.txt" }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.0
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run Flake8
          command: |
            . venv/bin/activate
            flake8 src test
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            python -m pytest --junitxml=test-reports/report.xml --cov-report term --cov-config setup.cfg --cov=src/ test/
      - store_test_results:
          path: test-reports
      - run:
          name: Check for dependencies with known vulnerabilities
          command: |
            . venv/bin/activate
            safety check
      - run:
          name: Check for files not formatted using Black
          command: |
            . venv/bin/activate
            black --check src/ --exclude vendor/
      - run:
          name: Check for files without correct import order
          command: |
            . venv/bin/activate
            isort -rc src/ test/ --skip vendor/ --skip src/models/__init__.py --check-only
